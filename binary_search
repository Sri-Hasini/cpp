/*                                     iterative binary_search
linear search -> searched from starting to last 
binary search -> it will search on a sorted one by dividing or  splitting until we find...
time complexity is O(log N)
eg: -we will fix the starting point as 'low' and ending point as 'high' and calculate 'mid'
    -on the next step we will check whether mid == target
    -if we found then we will break
    -otherwise check if mid<target or mid>target
    -if it is less then we will make high=mid-1
    -if it is high then we will make low=mid+1
    -we will continue this process until low<=high
    -if we didnt find it we will print -1

overflow problem here is:
    the high may be INT_MAX which may overflow to calculate mid i.e;
    mid=(INT_MAX + INT_MAX)/2;
    here integer mid cant store that much value which is 2*INT_MAX
    so the solution here is 
    --> use long long instead of int
    --> perform mid = low +(high-low)/2;
*/

#include <bits/stdc++.h>
using namespace std;

int main() {
    int n,target;
    cin >> n;
    int a[n];
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    cin >> target;
    int low=0,high=n-1,mid,g=-1;
    while(low<=high){
        mid=(low+high)/2;
        if(a[mid] == target){
            g=mid;
            break;
        }
        else if(a[mid] > target){
            high=mid-1;
        }
        else
        {
            low=mid+1;
        }
    }
    if(g==-1)cout<<-1<<endl;
    else cout<<g<<endl;
}
